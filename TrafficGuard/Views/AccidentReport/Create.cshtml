@model TrafficGuard.Models.AccidentReport

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #map {
        height: 400px;
        width: 600px;
    }
</style>

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
          integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
          crossorigin="" />

    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
            integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
            crossorigin=""></script>
    <!-- Load Esri Leaflet from CDN -->
    <script src="https://unpkg.com/esri-leaflet@3.0.10/dist/esri-leaflet.js"></script>
    <script src="https://unpkg.com/esri-leaflet-vector@4.0.0/dist/esri-leaflet-vector.js"></script>

    <!-- Load Esri Leaflet Geocoder from CDN -->
    <script src="https://unpkg.com/esri-leaflet-geocoder@3.1.3/dist/esri-leaflet-geocoder.js"></script>
</head>

@if ((bool)TempData["success"]!)
{
    <div class="alert alert-success alert-dismissible">
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        <strong>Success!</strong> Accident reported!
    </div>
}
else if (!String.IsNullOrWhiteSpace((string)TempData["error"]!))
{
    <div class="alert alert-danger alert-dismissible">
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        <strong>Error!</strong> @TempData["error"]
    </div>
}

<h1>Report</h1>

<h4>Accident</h4>
@*<hr />*@
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Latitude" class="control-label"></label>
                <input asp-for="Latitude" class="form-control" style="border:none;" readonly />
                <span asp-validation-for="Latitude" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Longitude" class="control-label"></label>
                <input asp-for="Longitude" class="form-control" style="border:none;" readonly />
                <span asp-validation-for="Longitude" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DateTime" class="control-label"></label>
                <input asp-for="DateTime" class="form-control" style="border:none;" />
                <span asp-validation-for="DateTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="NumVehicles" class="control-label">Number of Vehicle</label>
                <input asp-for="NumVehicles" class="form-control" style="border:none;" />
                <span asp-validation-for="NumVehicles" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" style="border:none;" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            @*<div class="form-group">
            <label asp-for="PathToFiles" class="control-label"></label>
            <input asp-for="PathToFiles" class="form-control" />
            <span asp-validation-for="PathToFiles" class="text-danger"></span>
            </div>*@
            <div class="form-group">
                @*<label asp-for="Json" class="control-label"></label>*@
                <input asp-for="Json" type="hidden" class="form-control" />
                @*<span asp-validation-for="TrustWorthyRating" class="text-danger"></span>*@
            </div>
            <div class="form-group">
                <p></p>
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-md-5">
        <div id="map">
            <script src="~/js/MapScript.js"></script>
            <script>
                const layerGroup = L.layerGroup().addTo(map);

                map.on("click", function (e) {

                    L.esri.Geocoding
                        .reverseGeocode({
                            apikey: apiKey
                        })
                        .latlng(e.latlng)
                        .language("eng")

                        .run(function (error, result) {
                            if (error) {
                                return;
                            }

                            layerGroup.clearLayers();
                            marker = L.marker(result.latlng).addTo(layerGroup);

                            const latLngString = `${Math.round(result.latlng.lat * 100000) / 100000}, ${Math.round(result.latlng.lng * 100000) / 100000}`;

                            marker.bindPopup(`<b>${latLngString}</b><p>${result.address.Match_addr}</p>`);
                            marker.openPopup();

                            var latLng = latLngString.split(", ");
                            document.getElementById("Latitude").value = latLng[0];
                            document.getElementById("Longitude").value = latLng[1];

                            document.getElementById("Json").value = JSON.stringify(result);
                            console.log(document.getElementById("Json").value);
                        });
                });
            </script>
            <script>
                var firstMarker;
                function getLocation() {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(showPosition);
                    }
                }

                function showPosition(position) {
                    //x = "Latitude: " + position.coords.latitude +
                    //    "<br>Longitude: " + position.coords.longitude;

                    L.esri.Geocoding
                        .reverseGeocode({
                            apikey: apiKey
                        })
                        .latlng([position.coords.latitude, position.coords.longitude])
                        .language("eng")

                        .run(function (error, result) {
                            if (error) {
                                return;
                            }

                            layerGroup.clearLayers();
                            marker = L.marker(result.latlng).addTo(layerGroup);

                            const latLngString = `${Math.round(result.latlng.lat * 100000) / 100000}, ${Math.round(result.latlng.lng * 100000) / 100000}`;

                            marker.bindPopup(`<b>${latLngString}</b><p>${result.address.Match_addr}</p>`);
                            marker.openPopup();

                            var latLng = latLngString.split(", ");
                            document.getElementById("Latitude").value = latLng[0];
                            document.getElementById("Longitude").value = latLng[1];

                            document.getElementById("Json").value = JSON.stringify(result);
                            console.log(document.getElementById("Json").value);
                        });
                }
            </script>
            <script>getLocation();</script>
        </div>
    </div>
</div>

@*<div>
    <a asp-action="Index" style="color: white">Back to List</a>
</div>*@

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
